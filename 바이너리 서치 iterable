# # # # #class list([iterable])
# # # # #함수가 아닌 형식(type).
# # # # #입력받은 iterable 객체를 리스트로 변환한다.
# # # #
# # # # print(list((1,2,3)))# 튜플을 리스트로
# # # # print(list({'1':1,'2':2,'3':3}))# 딕셔너리를 리스트로
# # # # #print(list({'1':1,'2':2,'3':3}.values()))# 딕셔너리 값만 리스트로
# # # # #print(list({'1':1,'2':2,'3':3}.keys()))# 딕셔너리 키만 리스트로
# # # # print(list({1,2,3}))
# # # # #class set([iterable])
# # # #함수가 아닌 형식(type).
# # # #입력받은 iterable 객체를 set로 변환한다.
# # # #print(set([1,2,2,3])) #집합으로 변환
# # # #print(set((1,2,2,3))) #집합으로 변환
# # # #print(set(range(4))) #집합으로 변환
# # # #print(set({'1':1,'2':2})) #집합으로 변환
# # # #class tuple([iterable])
# # # #함수가 아닌 형식.
# # # #입력받은 iterable 객체를 tuple로 변환한다.
# # #
# # # # print(tuple([1,2,3])) #리스트를 튜플로
# # # # print(tuple({1,2,3})) #집합를 튜플로
# # # # print(tuple({'1':1,'2':2})) #딕셔너리를 튜플로
# # # # print(tuple(range(4))) #range 시퀀스를 튜플로
# # #
# # # #class range(stop)
# # # #class range(start, stop [,step])
# # # #함수가 아닌 형식
# # # #1. stop만 입력한 경우.
# # # #2.start, stop 입력한 경우:start부터 stop-1 까지의 시퀀스 생성
# # # #2-1. 추가로 step을 입력한 경우:
# # #
# # # # print(list(range(4)))    #stop만 입력
# # # # print(list(range(1,4)))   #start,stop 입력
# # # # print(list(range(1,4,2)))# 추가로 step 입력
# # #
# # # #function filter(function, iterable)
# # # #[1,2,3,4,5,6,7,8,9,10]중 홀수만 뽑아서 리스트로 생성하시오?
# # # def holsu(s):
# # #     answer = []
# # #     for i in s:
# # #         if i % 2 != 0:
# # #             answer.append(i)
# # #     return answer
# # # print(holsu([1,2,3,4,5,6,7,8,9,10]))
# # #
# # # #위의 함수를 filter를 사용하면
# # # #2개의 인자가 필요함  function, iterable
# # # #function은 요소를 선택하는 조건(true/false)을 알려줘야 함
# # # def condition(item):
# # #     return item% 2 == 1
# # # result = list(filter(condition, range(1, 11)))
# # # print(result)
# # # result = list(filter(lambda x: x % 2 == 1, range(1,11)))
# # # print(result)
# # #
# # # #map(function,iterable,...)
# # # #range(1,11)을 각각 항목을 문자열로 변환한 리스트 생성
# # # def get_str(_list):
# # #     answer= []
# # #     for i in _list:
# # #         answer.append(str(i))
# # #     return answer
# # # print(get_str(range(1,11)))
# # #
# # #
# # # result = map(lambda x: str(x), range(1,11))
# # # print(result)
# # #
# # # #입력 input() 에서의 활용법
# # # _input = input("공백으로 구분하여 수 입력:")
# # # result = list(map(int, _input.split()))
# # #
# # # #두 시퀀스의 ㄱ밧을 서로 곱한 새로운 리스트?
# # # #map은 iterable 요소를 두개 이상 받을 수 있다.
# # # result = list(map(lambda x,y: x * y,range(1,11), range(1,11)))
# # #
# # # print(result)
# # #
# # # #zip(&iteravles, strict = False)
# # # #두 개 이상의 iteralbe 객체의 요소들을 짝지어준 새로운 시퀀스 리턴
# # a = ['one','two','three','four']
# # b = [1,2,3,4,5,6,7,8]
# # result = list(zip(a,b))
# # print(result)
# #
# # #*** strict = Ture 인 경우 엄격 모드
# # zip(a,b, strict=True)
#
#
# #enumberate(iterable, start=0)
# #입력받은 iterable 개체의 요소와 그 순서 번호를  start부터 짝지은
# #새로운 시퀀스르 리턴
#
# a= ['a','b','c','d','e']
#
# result = list(enumerate(a)) # start는 0에서부터 출발
# print(result)
#
# #zip 으로도 흉내 가능
# result = list(zip(range(len(a)), a))
# print(result)
#
# result= list(enumerate(a,start=3))
# print(result)
#
#
#
# #선형 탐색 linear search
def linear_search(_list,data):
    for i, n in enumerate(_list):
        if data == n:
            return i
        return None

#  이진 탐색 binary search
#알고리즘
#1. 리스트는 정렬이 되어 있어야 한다.
#2. 리스트의 시작과 끝을 left , right로 지정한다.
#3. (left + right) // 2를 middle로 지정한다.
#4. middle이 찾고자 하는 값이랑 같으면 해당 위치를 리턴한다.
#5. 값이 다른 경우
# 5-1 middle 보다 찾는 값이 크다. left = middle+1
# 5-2 middle 보다 찾는 값이 작다. right = middle-1
# 5-3 우ㅢ를 수행후 3번부터 다시 수행
# 6. left > right 가 되는 경우 값을 찾지 못한 것으로 None 을 리턴.
def binary_Search(_list,data):
    right = len(_list)-1
    left = 0
    while left <= right:
        middle = (right + left) // 2
        if _list[middle] == data:
            return middle
        elif _list[middle] < data:
            left = middle+1
        elif _list[middle] > data:
            right = middle -1

    return None






a = [1,3,5,7,9,11,13,15,17,19,21]
print(binary_Search(a,11))


