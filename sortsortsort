def merge_sort(A):
if A의 길이가 1 이하이면 그대로 리턴
mid
left_A = merge_sort(A[mid:])
right_A = merge_sort(A[mid:])\
merge_A = []
왼쪽 오른쪽에서 작은 값을 찾으며 합침
값이 남은 리스트를 그대로 뒤에 붙여줌
return merge_A

# #
# def binary_Search(_list,data):
#     right = len(_list)-1
#     left = 0
#     while left <= right:
#         middle = (right + left) // 2
#         if _list[middle] == data:
#             return middle
#         elif _list[middle] < data:
#             left = middle+1
#         elif _list[middle] > data:
#             right = middle -1
#
#     return None
#
#
#
#
#
#
# a = [1,3,5,7,9,11,13,15,17,19,21]
# print(binary_Search(a,11))

lsit_ = [3,2,5,1,4]
def selection_sort(a):
    for i in range(len(a)):
        b = i
        for j in range(i+1,len(a)):
            if a[b] < a[j]:
                b = j
        a[b],a[i] = a[i],a[b]

def bubble_search(A):
    for i in range(len(A)):

        for j in range(len(A)):
            if A[j] > A[i]:
                A[j],A[i] = A[i],A[j]

def bubble_sot(A):
    for i in range(len(A)-1,0,-1):
        for j in range(0,i):
            if A[j] > A[j+1]:
                A[j],A[j+1] = A[j],A[j+1]
            print(A)
        return A

bubble_search(lsit_)

def insertion_sort(A):
    for i in range(1,len(A)):
        k = A[i]
        j = i
        while A[j-1] > k and j >0:
            A[j] = A[j-1]
            j -= 1
        A[j] = k
A = [3,9,2,8,5,1,6,4,7]
def quick_sort(A,left,right):
    if right - left <1:
        return
    p = A[(left + right)//2]
    i = left
    j = right
    while i < j:
        while A[i] <p:
            i += 1
        while A[j] >p:
            j -= 1
        A[i], A[j], = A[j], A[i]
    quick_sort(A,left, i -1)
    quick_sort(A,j+1,right)

quick_sort(A,0,len(A) -1)

# #
# def binary_Search(_list,data):
#     right = len(_list)-1
#     left = 0
#     while left <= right:
#         middle = (right + left) // 2
#         if _list[middle] == data:
#             return middle
#         elif _list[middle] < data:
#             left = middle+1
#         elif _list[middle] > data:
#             right = middle -1
#
#     return None
#
#
#
#
#
#
# a = [1,3,5,7,9,11,13,15,17,19,21]
# print(binary_Search(a,11))

lsit_ = [3,2,5,1,4]
def selection_sort(a):
    for i in range(len(a)):
        b = i
        for j in range(i+1,len(a)):
            if a[b] < a[j]:
                b = j
        a[b],a[i] = a[i],a[b]

def bubble_search(A):
    for i in range(len(A)):

        for j in range(len(A)):
            if A[j] > A[i]:
                A[j],A[i] = A[i],A[j]

def bubble_sot(A):
    for i in range(len(A)-1,0,-1):
        for j in range(0,i):
            if A[j] > A[j+1]:
                A[j],A[j+1] = A[j],A[j+1]
            print(A)
        return A

bubble_search(lsit_)

def insertion_sort(A):
    for i in range(1,len(A)):
        k = A[i]
        j = i
        while A[j-1] > k and j >0:
            A[j] = A[j-1]
            j -= 1
        A[j] = k
A = [3,9,2,8,5,1,6,4,7]
def quick_sort(A,left,right):
    if right - left <1:
        return
    p = A[(left + right)//2]
    i = left
    j = right
    while i < j:
        while A[i] <p:
            i += 1
        while A[j] >p:
            j -= 1
        A[i], A[j], = A[j], A[i]
    quick_sort(A,left, i -1)
    quick_sort(A,j+1,right)

quick_sort(A,0,len(A) -1)

def merge_sort(A):
    if len(A) < 2:
        return A
    m = len(A) //2
    left_A = merge_sort(A[m:])
    right_A = merge_sort(A[:m])
    merged_A = []
    l = 0
    r = 0
    while l < len(left_A) and r < len(right_A):
        if left_A[l] > right_A[r]:
            merged_A.append(right_A[r])
            r += 1
        else:
            merged_A.append(left_A[l])
            l +=1

    merged_A += left_A[l:]
    merged_A += right_A[r:]
    return merged_A

A = [6,2,8,1,3,9,4,5,10,7]
A= merge_sort(A)
print(A)

